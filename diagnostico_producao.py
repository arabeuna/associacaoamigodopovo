#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico completo para ambiente de produ√ß√£o
Verifica conex√£o MongoDB, carregamento de dados e inicializa√ß√£o do sistema
"""

import os
import sys
from datetime import datetime

print("üîç DIAGN√ìSTICO COMPLETO - AMBIENTE DE PRODU√á√ÉO")
print("=" * 60)
print(f"Data/Hora: {datetime.now()}")
print(f"Python: {sys.version}")
print(f"Diret√≥rio: {os.getcwd()}")

# 1. Verificar vari√°veis de ambiente
print("\nüìã 1. VERIFICANDO VARI√ÅVEIS DE AMBIENTE:")
env_vars = [
    'MONGO_URI', 'MONGO_USERNAME', 'MONGO_PASSWORD', 
    'MONGO_CLUSTER', 'MONGO_DATABASE', 'FLASK_ENV'
]

for var in env_vars:
    value = os.environ.get(var, 'N√ÉO DEFINIDA')
    if 'PASSWORD' in var or 'URI' in var:
        # Mascarar dados sens√≠veis
        if value != 'N√ÉO DEFINIDA':
            masked = value[:10] + '***' + value[-10:] if len(value) > 20 else '***'
            print(f"   {var}: {masked}")
        else:
            print(f"   {var}: {value}")
    else:
        print(f"   {var}: {value}")

# 2. Testar conex√£o MongoDB direta
print("\nüîó 2. TESTANDO CONEX√ÉO MONGODB ATLAS:")
try:
    from pymongo import MongoClient
    
    mongo_uri = os.environ.get('MONGO_URI')
    if not mongo_uri:
        print("‚ùå MONGO_URI n√£o definida")
    else:
        print("‚úÖ MONGO_URI encontrada")
        
        # Testar conex√£o
        client = MongoClient(mongo_uri, serverSelectionTimeoutMS=10000)
        client.admin.command('ping')
        print("‚úÖ Ping MongoDB: SUCESSO")
        
        # Testar banco
        db_name = os.environ.get('MONGO_DATABASE', 'amigodopovoassociacao_db')
        db = client[db_name]
        
        # Contar documentos
        alunos_count = db.alunos.count_documents({})
        print(f"‚úÖ Alunos no banco: {alunos_count}")
        
        if alunos_count > 0:
            # Mostrar amostra
            sample = list(db.alunos.find({}, {'nome': 1, 'atividade': 1}).limit(3))
            print("üìã Amostra de alunos:")
            for i, aluno in enumerate(sample, 1):
                nome = aluno.get('nome', 'N/A')
                atividade = aluno.get('atividade', 'N/A')
                print(f"   {i}. {nome} - {atividade}")
        
        client.close()
        
except Exception as e:
    print(f"‚ùå Erro na conex√£o MongoDB: {e}")

# 3. Testar inicializa√ß√£o do sistema
print("\nüöÄ 3. TESTANDO INICIALIZA√á√ÉO DO SISTEMA:")
try:
    # Importar models primeiro
    from models import init_mongodb, AlunoDAO, USE_MEMORY_FALLBACK
    
    print(f"‚úÖ Models importados")
    print(f"   Modo fallback: {USE_MEMORY_FALLBACK}")
    
    # Testar DAO
    alunos = AlunoDAO.listar_todos()
    print(f"‚úÖ AlunoDAO.listar_todos(): {len(alunos)} alunos")
    
    if len(alunos) == 0:
        print("‚ö†Ô∏è PROBLEMA: Nenhum aluno retornado pelo DAO")
        print("   Poss√≠veis causas:")
        print("   - Sistema usando fallback em mem√≥ria")
        print("   - Conex√£o MongoDB falhando silenciosamente")
        print("   - Cole√ß√£o 'alunos' vazia no banco")
    
except Exception as e:
    print(f"‚ùå Erro ao importar/testar sistema: {e}")
    import traceback
    traceback.print_exc()

# 4. Testar inicializa√ß√£o da classe Academia
print("\nüè´ 4. TESTANDO CLASSE ACADEMIA:")
try:
    from app import SistemaAcademia
    
    print("‚úÖ Importando SistemaAcademia...")
    academia_test = SistemaAcademia()
    
    print(f"‚úÖ Academia inicializada")
    print(f"   Alunos carregados: {len(academia_test.alunos_reais)}")
    
    if len(academia_test.alunos_reais) == 0:
        print("‚ùå PROBLEMA CR√çTICO: Academia n√£o carregou alunos")
        print("   Verificar m√©todo carregar_dados_reais()")
    else:
        print("‚úÖ Academia funcionando corretamente")
        
except Exception as e:
    print(f"‚ùå Erro ao inicializar Academia: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 60)
print("üéØ DIAGN√ìSTICO CONCLU√çDO")
print("\nüí° PR√ìXIMOS PASSOS:")
print("1. Se MongoDB conecta mas Academia n√£o carrega dados:")
print("   - Verificar m√©todo carregar_dados_reais()")
print("   - Verificar se get_db_integration() funciona")
print("2. Se est√° usando fallback em mem√≥ria:")
print("   - Verificar inicializa√ß√£o do MongoDB")
print("   - Verificar vari√°veis de ambiente no Render")
print("3. Se nenhum dado aparece:")
print("   - Problema na inicializa√ß√£o da aplica√ß√£o Flask")