#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar se a interface local est√° funcionando corretamente
e se os alunos aparecem na p√°gina de alunos
"""

import requests
import json
from datetime import datetime
import time

print("üß™ TESTE DA INTERFACE LOCAL")
print("="*50)

# URL base da aplica√ß√£o local
BASE_URL = "http://localhost:5000"

def testar_conexao():
    """Testa se a aplica√ß√£o est√° rodando"""
    try:
        print("üîå Testando conex√£o com a aplica√ß√£o...")
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Aplica√ß√£o est√° rodando")
            return True
        else:
            print(f"‚ùå Aplica√ß√£o retornou status: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar √† aplica√ß√£o")
        print("üí° Certifique-se de que 'python app.py' est√° rodando")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

def testar_login():
    """Testa o login na aplica√ß√£o"""
    try:
        print("\nüîê Testando login...")
        session = requests.Session()
        
        # Fazer login como admin
        login_data = {
            'username': 'admin',
            'password': 'admin123'
        }
        
        response = session.post(f"{BASE_URL}/login", data=login_data, timeout=10)
        
        if response.status_code == 200 and 'dashboard' in response.url:
            print("‚úÖ Login realizado com sucesso")
            return session
        else:
            print(f"‚ùå Falha no login. Status: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return None

def testar_dashboard(session):
    """Testa se o dashboard carrega corretamente"""
    try:
        print("\nüìä Testando dashboard...")
        response = session.get(f"{BASE_URL}/dashboard", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Dashboard carregado com sucesso")
            
            # Verificar se h√° dados no HTML
            html_content = response.text
            if "Total de Alunos" in html_content:
                print("‚úÖ Dashboard cont√©m se√ß√£o de estat√≠sticas")
                
                # Tentar extrair n√∫mero de alunos
                import re
                alunos_match = re.search(r'Total de Alunos[^\d]*(\d+)', html_content)
                if alunos_match:
                    num_alunos = alunos_match.group(1)
                    print(f"üìä N√∫mero de alunos no dashboard: {num_alunos}")
                    return int(num_alunos)
                else:
                    print("‚ö†Ô∏è  N√£o foi poss√≠vel extrair n√∫mero de alunos")
            else:
                print("‚ö†Ô∏è  Dashboard n√£o cont√©m estat√≠sticas de alunos")
                
        else:
            print(f"‚ùå Falha ao carregar dashboard. Status: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar dashboard: {e}")
        
    return 0

def testar_pagina_alunos(session):
    """Testa se a p√°gina de alunos carrega e mostra os dados"""
    try:
        print("\nüë• Testando p√°gina de alunos...")
        response = session.get(f"{BASE_URL}/alunos", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ P√°gina de alunos carregada com sucesso")
            
            html_content = response.text
            
            # Verificar elementos importantes
            checks = [
                ("Alunos Cadastrados", "t√≠tulo da p√°gina"),
                ("Total de Alunos", "contador de alunos"),
                ("table", "tabela de alunos"),
                ("tbody", "corpo da tabela"),
                ("Buscar Alunos", "campo de busca")
            ]
            
            for check, desc in checks:
                if check in html_content:
                    print(f"‚úÖ {desc} encontrado")
                else:
                    print(f"‚ùå {desc} N√ÉO encontrado")
            
            # Contar linhas de alunos na tabela
            import re
            tr_matches = re.findall(r'<tr[^>]*data-aluno', html_content)
            num_linhas = len(tr_matches)
            print(f"üìä Linhas de alunos na tabela: {num_linhas}")
            
            # Verificar se h√° mensagem de "nenhum aluno"
            if "Nenhum aluno cadastrado" in html_content or "n√£o foram encontrados" in html_content:
                print("‚ùå P√°gina mostra mensagem de 'nenhum aluno'")
                return 0
            else:
                print("‚úÖ P√°gina n√£o mostra mensagem de 'nenhum aluno'")
                return num_linhas
                
        else:
            print(f"‚ùå Falha ao carregar p√°gina de alunos. Status: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar p√°gina de alunos: {e}")
        
    return 0

def testar_api_buscar_alunos(session):
    """Testa a API de busca de alunos"""
    try:
        print("\nüîç Testando API de busca de alunos...")
        response = session.get(f"{BASE_URL}/buscar_alunos", timeout=10)
        
        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, list):
                    print(f"‚úÖ API retornou {len(data)} alunos")
                    
                    if len(data) > 0:
                        # Mostrar exemplo do primeiro aluno
                        primeiro_aluno = data[0]
                        nome = primeiro_aluno.get('nome', 'N/A')
                        atividade = primeiro_aluno.get('atividade', 'N/A')
                        ativo = primeiro_aluno.get('ativo', 'N/A')
                        print(f"üìã Exemplo: {nome} - {atividade} - Ativo: {ativo}")
                        
                        # Contar alunos ativos
                        ativos = sum(1 for aluno in data if aluno.get('ativo', False))
                        print(f"‚úÖ Alunos ativos: {ativos}/{len(data)}")
                        
                        return len(data)
                    else:
                        print("‚ö†Ô∏è  API retornou lista vazia")
                        return 0
                else:
                    print(f"‚ùå API retornou formato inesperado: {type(data)}")
                    return 0
                    
            except json.JSONDecodeError:
                print("‚ùå Resposta da API n√£o √© JSON v√°lido")
                return 0
        else:
            print(f"‚ùå Falha na API. Status: {response.status_code}")
            return 0
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {e}")
        return 0

def main():
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Aguardar um pouco para garantir que a aplica√ß√£o esteja rodando
    print("‚è≥ Aguardando 3 segundos para garantir que a aplica√ß√£o esteja pronta...")
    time.sleep(3)
    
    # Teste 1: Conex√£o
    if not testar_conexao():
        print("\n‚ùå FALHA: Aplica√ß√£o n√£o est√° rodando")
        print("üí° Execute 'python app.py' em outro terminal")
        return
    
    # Teste 2: Login
    session = testar_login()
    if not session:
        print("\n‚ùå FALHA: N√£o foi poss√≠vel fazer login")
        return
    
    # Teste 3: Dashboard
    alunos_dashboard = testar_dashboard(session)
    
    # Teste 4: P√°gina de alunos
    alunos_pagina = testar_pagina_alunos(session)
    
    # Teste 5: API de busca
    alunos_api = testar_api_buscar_alunos(session)
    
    # Resumo
    print("\n" + "="*50)
    print("üìã RESUMO DOS TESTES")
    print("="*50)
    print(f"üìä Alunos no dashboard: {alunos_dashboard}")
    print(f"üë• Alunos na p√°gina: {alunos_pagina}")
    print(f"üîç Alunos na API: {alunos_api}")
    
    if alunos_api > 0:
        print("\nüéâ SUCESSO: A aplica√ß√£o est√° funcionando!")
        print(f"‚úÖ {alunos_api} alunos foram encontrados")
        
        if alunos_api == 315:
            print("üéØ PERFEITO: Todos os 315 alunos est√£o sendo exibidos")
        else:
            print(f"‚ö†Ô∏è  ATEN√á√ÉO: Esperado 315 alunos, encontrado {alunos_api}")
    else:
        print("\n‚ùå PROBLEMA: Nenhum aluno foi encontrado")
        print("üîç Poss√≠veis causas:")
        print("   - Problema na conex√£o com MongoDB")
        print("   - Filtros de usu√°rio bloqueando dados")
        print("   - Erro na fun√ß√£o obter_alunos_usuario()")
    
    print("\n" + "="*50)
    print("üèÅ TESTE CONCLU√çDO")
    print("="*50)

if __name__ == "__main__":
    main()