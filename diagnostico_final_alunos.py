#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico final: Por que alguns alunos n√£o aparecem no dashboard
Script corrigido para verificar adequadamente os dados
"""

import os
from datetime import datetime

print("üîç DIAGN√ìSTICO FINAL: ALUNOS AUSENTES NO DASHBOARD")
print("=" * 70)
print(f"Data/Hora: {datetime.now()}")

# Lista de alunos da imagem fornecida pelo usu√°rio
alunos_imagem = [
    "JO√ÉO VITOR GOMES SANTOS",
    "KELVIN ENRIQUE DA SILVA DA SILVA", 
    "HENRY DE SOUZA VERAS",
    "ANA CLARA SILVA SANTOS",
    "CARLOS EDUARDO SOUZA",
    "MARIANA COSTA RIBEIRO",
    "PEDRO HENRIQUE DIAS",
    "LARISSA OLIVEIRA MELO",
    "DIEGO FERREIRA LIMA",
    "REGINA SANTOS BARBOSA",
    "ROBERTO SILVA MENDES",
    "ALEXANDRE COSTA MOURA",
    "PATRICIA SANTOS ROCHA",
    "LET√çCIA FERREIRA GOMES",
    "RAFAEL SANTOS OLIVEIRA",
    "MIGUEL SANTOS COSTA",
    "HELENA OLIVEIRA SILVA",
    "CAIO SANTOS FERREIRA"
]

print(f"\nüìã ALUNOS DA IMAGEM ({len(alunos_imagem)} alunos):")
for i, nome in enumerate(alunos_imagem, 1):
    print(f"   {i:2d}. {nome}")

# 1. Verificar dados usando conex√£o direta com MongoDB
print("\nüîó 1. VERIFICANDO DADOS DIRETAMENTE NO MONGODB:")
try:
    from database_integration_robusto import DatabaseIntegrationRobusto
    
    db_integration = DatabaseIntegrationRobusto()
    
    # Verificar se tem conex√£o com banco (comparar com None)
    if db_integration.db is not None:
        print("   ‚úÖ Conex√£o com MongoDB estabelecida")
        
        # Acessar collection de alunos diretamente
        collection = db_integration.db.alunos
        count = collection.count_documents({})
        print(f"   üìä Total de documentos na collection 'alunos': {count}")
        
        if count > 0:
            # Buscar alguns documentos
            docs = list(collection.find().limit(10))
            print(f"\n   üìã Primeiros 10 alunos no banco:")
            for i, doc in enumerate(docs, 1):
                nome = doc.get('nome', 'N/A')
                atividade = doc.get('atividade', 'N/A')
                ativo = doc.get('ativo', 'N/A')
                print(f"      {i:2d}. {nome} - {atividade} - Ativo: {ativo}")
            
            # Verificar se os alunos da imagem est√£o no banco
            print(f"\n   üîç VERIFICANDO ALUNOS DA IMAGEM NO BANCO:")
            
            encontrados_banco = 0
            nao_encontrados_banco = 0
            
            for nome_imagem in alunos_imagem:
                # Busca case-insensitive
                doc = collection.find_one({"nome": {"$regex": f"^{nome_imagem}$", "$options": "i"}})
                if doc:
                    encontrados_banco += 1
                    ativo = doc.get('ativo', True)  # Default True se n√£o especificado
                    status_str = "‚úÖ ATIVO" if ativo else "‚ö†Ô∏è INATIVO"
                    print(f"      ‚úÖ {nome_imagem} - ENCONTRADO - {status_str}")
                    print(f"         Atividade: {doc.get('atividade', 'N/A')}")
                    print(f"         Turma: {doc.get('turma', 'N/A')}")
                    print(f"         Data Cadastro: {doc.get('data_cadastro', 'N/A')}")
                else:
                    nao_encontrados_banco += 1
                    print(f"      ‚ùå {nome_imagem} - N√ÉO ENCONTRADO NO BANCO")
            
            print(f"\n   üìä RESUMO BANCO:")
            print(f"      Encontrados: {encontrados_banco}/{len(alunos_imagem)}")
            print(f"      N√£o encontrados: {nao_encontrados_banco}")
            
            # Verificar se h√° alunos inativos
            inativos = collection.count_documents({"ativo": False})
            print(f"      Alunos inativos no banco: {inativos}")
        
    else:
        print("   ‚ö†Ô∏è Sem conex√£o com MongoDB - usando modo fallback")
        
except Exception as e:
    print(f"   ‚ùå Erro: {e}")
    import traceback
    traceback.print_exc()

# 2. Verificar dados carregados no sistema
print("\nüè´ 2. VERIFICANDO DADOS CARREGADOS NO SISTEMA:")
try:
    from app import academia
    
    if academia is not None and hasattr(academia, 'alunos_reais'):
        alunos_sistema = academia.alunos_reais
        print(f"   ‚úÖ Total de alunos no sistema: {len(alunos_sistema)}")
        
        if len(alunos_sistema) > 0:
            print(f"\n   üìã Primeiros 10 alunos no sistema:")
            for i, aluno in enumerate(alunos_sistema[:10], 1):
                nome = aluno.get('nome', 'N/A')
                atividade = aluno.get('atividade', 'N/A')
                ativo = aluno.get('ativo', True)
                status_str = "‚úÖ ATIVO" if ativo else "‚ö†Ô∏è INATIVO"
                print(f"      {i:2d}. {nome} - {atividade} - {status_str}")
            
            # Verificar se os alunos da imagem est√£o no sistema
            print(f"\n   üîç VERIFICANDO ALUNOS DA IMAGEM NO SISTEMA:")
            
            encontrados_sistema = 0
            nao_encontrados_sistema = 0
            alunos_inativos_sistema = 0
            
            for nome_imagem in alunos_imagem:
                encontrado = False
                for aluno in alunos_sistema:
                    if aluno.get('nome', '').upper() == nome_imagem.upper():
                        encontrado = True
                        encontrados_sistema += 1
                        ativo = aluno.get('ativo', True)
                        if not ativo:
                            alunos_inativos_sistema += 1
                        status_str = "‚úÖ ATIVO" if ativo else "‚ö†Ô∏è INATIVO"
                        print(f"      ‚úÖ {nome_imagem} - ENCONTRADO - {status_str}")
                        print(f"         Atividade: {aluno.get('atividade', 'N/A')}")
                        print(f"         Turma: {aluno.get('turma', 'N/A')}")
                        break
                
                if not encontrado:
                    nao_encontrados_sistema += 1
                    print(f"      ‚ùå {nome_imagem} - N√ÉO ENCONTRADO NO SISTEMA")
            
            print(f"\n   üìä RESUMO SISTEMA:")
            print(f"      Encontrados: {encontrados_sistema}/{len(alunos_imagem)}")
            print(f"      N√£o encontrados: {nao_encontrados_sistema}")
            print(f"      Alunos inativos encontrados: {alunos_inativos_sistema}")
        
    else:
        print(f"   ‚ùå Sistema n√£o inicializado ou sem dados")
        
except Exception as e:
    print(f"   ‚ùå Erro ao acessar sistema: {e}")
    import traceback
    traceback.print_exc()

# 3. An√°lise final e recomenda√ß√µes
print("\nüéØ 3. AN√ÅLISE FINAL E DIAGN√ìSTICO:")
print("\nüîç POSS√çVEIS CAUSAS DOS ALUNOS N√ÉO APARECEREM:")
print("\n   üìä PROBLEMAS DE DADOS:")
print("      ‚Ä¢ Alunos com status 'ativo' = False")
print("      ‚Ä¢ Campos obrigat√≥rios em branco (atividade, turma)")
print("      ‚Ä¢ Dados inconsistentes entre banco e sistema")
print("\n   üñ•Ô∏è PROBLEMAS DE INTERFACE:")
print("      ‚Ä¢ Filtros ativos no dashboard (por atividade, turma, status)")
print("      ‚Ä¢ Pagina√ß√£o - alunos em outras p√°ginas")
print("      ‚Ä¢ Cache do navegador desatualizado")
print("      ‚Ä¢ Problemas de busca/ordena√ß√£o")
print("\n   ‚öôÔ∏è PROBLEMAS T√âCNICOS:")
print("      ‚Ä¢ Problemas na consulta/renderiza√ß√£o do frontend")
print("      ‚Ä¢ Sincroniza√ß√£o entre banco e sistema")
print("      ‚Ä¢ Logs de erro n√£o capturados")

print("\nüîß SOLU√á√ïES RECOMENDADAS:")
print("\n   1. ‚úÖ VERIFICA√á√ïES IMEDIATAS:")
print("      ‚Ä¢ Limpar todos os filtros na interface")
print("      ‚Ä¢ Verificar se h√° pagina√ß√£o ativa")
print("      ‚Ä¢ Limpar cache do navegador (Ctrl+F5)")
print("      ‚Ä¢ Testar busca espec√≠fica por nome")
print("\n   2. üîß CORRE√á√ïES DE DADOS:")
print("      ‚Ä¢ Verificar e corrigir status 'ativo' dos alunos")
print("      ‚Ä¢ Preencher campos obrigat√≥rios em branco")
print("      ‚Ä¢ Sincronizar dados entre banco e sistema")
print("\n   3. üîç INVESTIGA√á√ÉO ADICIONAL:")
print("      ‚Ä¢ Verificar logs do sistema em tempo real")
print("      ‚Ä¢ Testar com dados de exemplo")
print("      ‚Ä¢ Verificar permiss√µes de acesso aos dados")

print("\n" + "=" * 70)
print("üéØ DIAGN√ìSTICO CONCLU√çDO")
print("\nüí° PR√ìXIMO PASSO: Verificar filtros ativos na interface do dashboard")