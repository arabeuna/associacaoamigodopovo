#!/usr/bin/env python3
"""
Script para configurar o PostgreSQL da Academia Amigo do Povo
"""
import os
import subprocess
import psycopg2
from dotenv import load_dotenv

def verificar_postgresql_instalado():
    """Verifica se o PostgreSQL est√° instalado"""
    print("üîç Verificando instala√ß√£o do PostgreSQL...")
    
    # Verificar diferentes vers√µes do PostgreSQL
    versoes = ['17', '16', '15', '14']
    
    for versao in versoes:
        # Verificar se o execut√°vel existe
        psql_path = f"C:\\Program Files\\PostgreSQL\\{versao}\\bin\\psql.exe"
        if os.path.exists(psql_path):
            print(f"‚úÖ PostgreSQL {versao} encontrado em: {psql_path}")
            return True, versao
        
        # Verificar se est√° no PATH
        try:
            result = subprocess.run(['psql', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ PostgreSQL encontrado no PATH: {result.stdout.strip()}")
                return True, versao
        except:
            continue
    
    print("‚ùå PostgreSQL n√£o encontrado no PATH")
    return False, None

def instalar_dependencias():
    """Instala depend√™ncias Python necess√°rias"""
    print("üì¶ Instalando depend√™ncias Python...")
    
    dependencias = [
        'psycopg2-binary',
        'python-dotenv',
        'flask',
        'flask-sqlalchemy'
    ]
    
    for dep in dependencias:
        try:
            subprocess.run(['pip', 'install', dep], check=True, capture_output=True)
            print(f"‚úÖ {dep} instalado")
        except subprocess.CalledProcessError:
            print(f"‚ùå Erro ao instalar {dep}")
            return False
    
    return True

def testar_conexao_postgresql():
    """Testa conex√£o com PostgreSQL"""
    print("üîó Testando conex√£o com PostgreSQL...")
    
    try:
        # Tentar conectar com senha padr√£o primeiro
        conn = psycopg2.connect(
            host='localhost',
            port=5432,
            user='postgres',
            password='postgres',
            database='postgres'
        )
        conn.close()
        print("‚úÖ Conex√£o estabelecida com senha padr√£o 'postgres'")
        return True
    except:
        try:
            # Tentar conectar com senha admin123
            conn = psycopg2.connect(
                host='localhost',
                port=5432,
                user='postgres',
                password='admin123',
                database='postgres'
            )
            conn.close()
            print("‚úÖ Conex√£o estabelecida com senha 'admin123'")
            return True
        except Exception as e:
            print(f"‚ùå Falha na conex√£o: {e}")
            return False

def criar_banco_dados():
    """Cria o banco de dados academia_amigo_povo"""
    print("üóÑÔ∏è Criando banco de dados...")
    
    try:
        # Tentar conectar e criar banco
        conn = psycopg2.connect(
            host='localhost',
            port=5432,
            user='postgres',
            password='admin123',
            database='postgres'
        )
        conn.autocommit = True
        cursor = conn.cursor()
        
        # Criar banco se n√£o existir
        cursor.execute("SELECT 1 FROM pg_database WHERE datname='academia_amigo_povo'")
        if not cursor.fetchone():
            cursor.execute("CREATE DATABASE academia_amigo_povo")
            print("‚úÖ Banco de dados criado com sucesso!")
        else:
            print("‚úÖ Banco de dados j√° existe!")
        
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar banco: {e}")
        return False

def criar_arquivo_env():
    """Cria o arquivo .env com as configura√ß√µes"""
    print("üìù Criando arquivo .env...")
    
    env_content = """# Configura√ß√µes do PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=admin123
DB_NAME=academia_amigo_povo

# URL do banco de dados
DATABASE_URL=postgresql://postgres:admin123@localhost:5432/academia_amigo_povo

# Configura√ß√µes da aplica√ß√£o
SECRET_KEY=associacao_amigo_do_povo_2024_secure_key
FLASK_ENV=development
DEBUG=True
"""
    
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo .env: {e}")
        return False

def configurar_senha_postgres():
    """Configura a senha do usu√°rio postgres"""
    print("üîê Configurando senha do usu√°rio postgres...")
    
    try:
        # Tentar conectar com senha padr√£o
        conn = psycopg2.connect(
            host='localhost',
            port=5432,
            user='postgres',
            password='postgres',
            database='postgres'
        )
        conn.autocommit = True
        cursor = conn.cursor()
        
        # Alterar senha
        cursor.execute("ALTER USER postgres PASSWORD 'admin123'")
        print("‚úÖ Senha configurada com sucesso!")
        
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel configurar a senha automaticamente: {e}")
        print("   Configure manualmente: ALTER USER postgres PASSWORD 'admin123';")
        return False

def main():
    print("=" * 60)
    print("    CONFIGURA√á√ÉO DO POSTGRESQL - ACADEMIA AMIGO DO POVO")
    print("=" * 60)
    
    print("\nüîç Verificando instala√ß√£o do PostgreSQL...")
    instalado, versao = verificar_postgresql_instalado()
    if not instalado:
        print("\n‚ùå PostgreSQL n√£o est√° instalado!")
        print("üì• Baixe e instale o PostgreSQL 17 em: https://www.postgresql.org/download/windows/")
        print("üìã Use a senha: admin123 para o usu√°rio postgres")
        return
    
    print(f"\n‚úÖ PostgreSQL {versao} encontrado!")
    
    print("\nüì¶ Instalando depend√™ncias Python...")
    if not instalar_dependencias():
        print("‚ùå Falha ao instalar depend√™ncias!")
        return
    
    print("\nüîê Configurando senha do PostgreSQL...")
    configurar_senha_postgres()
    
    print("\nüîó Testando conex√£o com PostgreSQL...")
    if not testar_conexao_postgresql():
        print("‚ùå Falha na conex√£o com PostgreSQL!")
        print("üí° Verifique se o PostgreSQL est√° rodando")
        return
    
    print("\nüóÑÔ∏è Criando banco de dados...")
    if not criar_banco_dados():
        print("‚ùå Falha ao criar banco de dados!")
        return
    
    print("\nüìù Criando arquivo .env...")
    if not criar_arquivo_env():
        print("‚ùå Falha ao criar arquivo .env!")
        return
    
    print("\n" + "=" * 60)
    print("‚úÖ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 60)
    
    print("\nüöÄ Pr√≥ximos passos:")
    print("1. Execute: python database_setup.py")
    print("2. Execute: python app.py")
    print("3. Acesse: http://127.0.0.1:5000")
    
    print("\nüìã Credenciais do sistema:")
    print("   Usu√°rio: admin")
    print("   Senha: admin123")

if __name__ == "__main__":
    main()
