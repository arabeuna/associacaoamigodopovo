#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Verifica√ß√£o - Produ√ß√£o
Verifica se as configura√ß√µes de produ√ß√£o est√£o funcionando corretamente
"""

import os
import sys
from dotenv import load_dotenv
import psycopg2
from datetime import datetime

def verificar_variaveis_ambiente():
    """Verifica se todas as vari√°veis necess√°rias est√£o definidas"""
    print("üîç VERIFICANDO VARI√ÅVEIS DE AMBIENTE")
    print("=" * 50)
    
    variaveis_obrigatorias = {
        'DATABASE_URL': 'URL completa do PostgreSQL',
        'DB_HOST': 'Hostname do PostgreSQL',
        'DB_PORT': 'Porta do PostgreSQL',
        'DB_USER': 'Usu√°rio do banco',
        'DB_PASSWORD': 'Senha do banco',
        'DB_NAME': 'Nome do banco',
        'SECRET_KEY': 'Chave secreta da aplica√ß√£o',
        'FLASK_ENV': 'Ambiente Flask',
        'FLASK_DEBUG': 'Debug Flask'
    }
    
    variaveis_ok = True
    
    for var, descricao in variaveis_obrigatorias.items():
        valor = os.environ.get(var)
        
        if not valor:
            print(f"‚ùå {var}: N√ÉO DEFINIDA ({descricao})")
            variaveis_ok = False
        elif valor.startswith('${') and valor.endswith('}'):
            print(f"‚ö†Ô∏è  {var}: PLACEHOLDER N√ÉO SUBSTITU√çDO ({valor})")
            variaveis_ok = False
        else:
            if 'PASSWORD' in var or 'SECRET' in var:
                print(f"‚úÖ {var}: {'*' * 8} ({descricao})")
            else:
                valor_exibir = valor[:30] + '...' if len(valor) > 30 else valor
                print(f"‚úÖ {var}: {valor_exibir} ({descricao})")
    
    return variaveis_ok

def testar_conexao_banco():
    """Testa conex√£o com o banco de dados"""
    print("\nüîå TESTANDO CONEX√ÉO COM BANCO DE DADOS")
    print("=" * 50)
    
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url or database_url.startswith('${'):
        print("‚ùå DATABASE_URL n√£o est√° configurada corretamente")
        return False
    
    try:
        print(f"üîó Conectando ao PostgreSQL...")
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Testar vers√£o
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ Conex√£o estabelecida com sucesso!")
        print(f"   PostgreSQL: {version.split(',')[0]}")
        
        # Verificar tabelas principais
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('alunos', 'atividades', 'turmas', 'usuarios', 'presencas')
            ORDER BY table_name;
        """)
        
        tabelas = cursor.fetchall()
        print(f"\nüìã Tabelas encontradas ({len(tabelas)}/5):")
        tabelas_esperadas = ['alunos', 'atividades', 'presencas', 'turmas', 'usuarios']
        
        for tabela in tabelas:
            print(f"   ‚úÖ {tabela[0]}")
        
        tabelas_encontradas = [t[0] for t in tabelas]
        tabelas_faltantes = [t for t in tabelas_esperadas if t not in tabelas_encontradas]
        
        if tabelas_faltantes:
            print(f"\n‚ö†Ô∏è  Tabelas faltantes: {', '.join(tabelas_faltantes)}")
        
        # Contar registros principais
        print(f"\nüìä Contagem de registros:")
        for tabela in tabelas_encontradas:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {tabela[0]};")
                count = cursor.fetchone()[0]
                print(f"   {tabela[0]}: {count} registros")
            except Exception as e:
                print(f"   {tabela[0]}: Erro ao contar - {e}")
        
        cursor.close()
        conn.close()
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        print("\nüí° Poss√≠veis causas:")
        print("   - Credenciais incorretas")
        print("   - Servidor PostgreSQL indispon√≠vel")
        print("   - Firewall bloqueando conex√£o")
        print("   - URL de conex√£o malformada")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def verificar_configuracoes_flask():
    """Verifica configura√ß√µes espec√≠ficas do Flask"""
    print("\n‚öôÔ∏è VERIFICANDO CONFIGURA√á√ïES FLASK")
    print("=" * 50)
    
    flask_env = os.environ.get('FLASK_ENV')
    flask_debug = os.environ.get('FLASK_DEBUG')
    secret_key = os.environ.get('SECRET_KEY')
    
    config_ok = True
    
    # Verificar ambiente
    if flask_env == 'production':
        print(f"‚úÖ FLASK_ENV: {flask_env} (correto para produ√ß√£o)")
    else:
        print(f"‚ö†Ô∏è  FLASK_ENV: {flask_env} (deveria ser 'production')")
        config_ok = False
    
    # Verificar debug
    if flask_debug in ['False', 'false', '0', False]:
        print(f"‚úÖ FLASK_DEBUG: {flask_debug} (correto para produ√ß√£o)")
    else:
        print(f"‚ö†Ô∏è  FLASK_DEBUG: {flask_debug} (deveria ser 'False' em produ√ß√£o)")
        config_ok = False
    
    # Verificar chave secreta
    if secret_key and len(secret_key) >= 32:
        print(f"‚úÖ SECRET_KEY: Definida e segura ({len(secret_key)} caracteres)")
    elif secret_key:
        print(f"‚ö†Ô∏è  SECRET_KEY: Muito curta ({len(secret_key)} caracteres, recomendado: 32+)")
        config_ok = False
    else:
        print(f"‚ùå SECRET_KEY: N√£o definida")
        config_ok = False
    
    return config_ok

def gerar_relatorio_status():
    """Gera relat√≥rio final de status"""
    print("\nüìã RELAT√ìRIO FINAL")
    print("=" * 50)
    
    # Carregar configura√ß√µes
    if os.path.exists('.env.production'):
        load_dotenv('.env.production', override=True)
        print("‚úÖ Configura√ß√µes de produ√ß√£o carregadas")
    else:
        load_dotenv()
        print("‚ö†Ô∏è  Usando configura√ß√µes padr√£o (.env)")
    
    # Executar verifica√ß√µes
    variaveis_ok = verificar_variaveis_ambiente()
    conexao_ok = testar_conexao_banco()
    flask_ok = verificar_configuracoes_flask()
    
    # Status geral
    print("\nüèÅ STATUS GERAL")
    print("=" * 50)
    
    if variaveis_ok and conexao_ok and flask_ok:
        print("‚úÖ PRODU√á√ÉO CONFIGURADA CORRETAMENTE!")
        print("   Todas as verifica√ß√µes passaram")
        print("   Sistema pronto para uso em produ√ß√£o")
        return True
    else:
        print("‚ùå PROBLEMAS ENCONTRADOS:")
        if not variaveis_ok:
            print("   - Vari√°veis de ambiente n√£o configuradas")
        if not conexao_ok:
            print("   - Falha na conex√£o com banco de dados")
        if not flask_ok:
            print("   - Configura√ß√µes Flask inadequadas para produ√ß√£o")
        
        print("\nüí° Consulte SOLUCAO_ERRO_POSTGRESQL_PRODUCAO.md para corre√ß√µes")
        return False

def main():
    """Fun√ß√£o principal"""
    print(f"üîç VERIFICA√á√ÉO DE PRODU√á√ÉO - ACADEMIA AMIGO DO POVO")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        sucesso = gerar_relatorio_status()
        return sucesso
    except Exception as e:
        print(f"‚ùå Erro durante verifica√ß√£o: {e}")
        return False

if __name__ == "__main__":
    try:
        sucesso = main()
        print("\n" + "=" * 60)
        if sucesso:
            print("üéâ VERIFICA√á√ÉO CONCLU√çDA COM SUCESSO!")
            sys.exit(0)
        else:
            print("‚ö†Ô∏è  VERIFICA√á√ÉO CONCLU√çDA COM PROBLEMAS")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Verifica√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico: {e}")
        sys.exit(1)