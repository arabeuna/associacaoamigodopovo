#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verifica√ß√£o espec√≠fica dos alunos da imagem no banco MongoDB
Para entender exatamente quais est√£o presentes e quais n√£o est√£o
"""

import os
from datetime import datetime

print("üîç VERIFICA√á√ÉO ESPEC√çFICA: ALUNOS DA IMAGEM")
print("=" * 60)
print(f"Data/Hora: {datetime.now()}")

# Lista de alunos da imagem fornecida pelo usu√°rio
alunos_imagem = [
    "JO√ÉO VITOR GOMES SANTOS",
    "KELVIN ENRIQUE DA SILVA DA SILVA", 
    "HENRY DE SOUZA VERAS",
    "ANA CLARA SILVA SANTOS",
    "CARLOS EDUARDO SOUZA",
    "MARIANA COSTA RIBEIRO",
    "PEDRO HENRIQUE DIAS",
    "LARISSA OLIVEIRA MELO",
    "DIEGO FERREIRA LIMA",
    "REGINA SANTOS BARBOSA",
    "ROBERTO SILVA MENDES",
    "ALEXANDRE COSTA MOURA",
    "PATRICIA SANTOS ROCHA",
    "LET√çCIA FERREIRA GOMES",
    "RAFAEL SANTOS OLIVEIRA",
    "MIGUEL SANTOS COSTA",
    "HELENA OLIVEIRA SILVA",
    "CAIO SANTOS FERREIRA"
]

print(f"\nüìã VERIFICANDO {len(alunos_imagem)} ALUNOS DA IMAGEM NO BANCO:")

try:
    from database_integration_robusto import DatabaseIntegrationRobusto
    
    db_integration = DatabaseIntegrationRobusto()
    
    if db_integration.db is not None:
        collection = db_integration.db.alunos
        total_banco = collection.count_documents({})
        print(f"\n‚úÖ Conectado ao MongoDB - Total de alunos no banco: {total_banco}")
        
        encontrados = []
        nao_encontrados = []
        
        print(f"\nüîç VERIFICA√á√ÉO DETALHADA:")
        print("=" * 60)
        
        for i, nome_imagem in enumerate(alunos_imagem, 1):
            print(f"\n{i:2d}. {nome_imagem}")
            
            # Busca exata (case-insensitive)
            doc = collection.find_one({"nome": {"$regex": f"^{nome_imagem}$", "$options": "i"}})
            
            if doc:
                encontrados.append(nome_imagem)
                ativo = doc.get('ativo', True)
                status_str = "‚úÖ ATIVO" if ativo else "‚ö†Ô∏è INATIVO"
                print(f"    ‚úÖ ENCONTRADO NO BANCO - {status_str}")
                print(f"    üìã Atividade: {doc.get('atividade', 'N/A')}")
                print(f"    üè´ Turma: {doc.get('turma', 'N/A')}")
                print(f"    üìÖ Data Cadastro: {doc.get('data_cadastro', 'N/A')}")
                print(f"    üìß Email: {doc.get('email', 'N/A')}")
                print(f"    üìû Telefone: {doc.get('telefone', 'N/A')}")
            else:
                nao_encontrados.append(nome_imagem)
                print(f"    ‚ùå N√ÉO ENCONTRADO NO BANCO")
                
                # Tentar busca parcial para ver se h√° nomes similares
                palavras = nome_imagem.split()
                if len(palavras) >= 2:
                    primeiro_nome = palavras[0]
                    ultimo_nome = palavras[-1]
                    
                    # Buscar por primeiro e √∫ltimo nome
                    similar = list(collection.find({
                        "$and": [
                            {"nome": {"$regex": primeiro_nome, "$options": "i"}},
                            {"nome": {"$regex": ultimo_nome, "$options": "i"}}
                        ]
                    }).limit(3))
                    
                    if similar:
                        print(f"    üîç Nomes similares encontrados:")
                        for sim in similar:
                            print(f"       - {sim.get('nome', 'N/A')}")
        
        print(f"\n" + "=" * 60)
        print(f"üìä RESUMO FINAL:")
        print(f"   ‚úÖ Encontrados no banco: {len(encontrados)}/{len(alunos_imagem)}")
        print(f"   ‚ùå N√£o encontrados: {len(nao_encontrados)}")
        
        if encontrados:
            print(f"\n‚úÖ ALUNOS ENCONTRADOS NO BANCO ({len(encontrados)}):")
            for nome in encontrados:
                print(f"   ‚Ä¢ {nome}")
        
        if nao_encontrados:
            print(f"\n‚ùå ALUNOS N√ÉO ENCONTRADOS NO BANCO ({len(nao_encontrados)}):")
            for nome in nao_encontrados:
                print(f"   ‚Ä¢ {nome}")
        
        # Verificar se h√° problemas de dados
        print(f"\nüîç AN√ÅLISE ADICIONAL:")
        
        # Contar alunos inativos
        inativos = collection.count_documents({"ativo": False})
        print(f"   ‚ö†Ô∏è Total de alunos inativos no banco: {inativos}")
        
        # Contar alunos sem atividade definida
        sem_atividade = collection.count_documents({
            "$or": [
                {"atividade": {"$exists": False}},
                {"atividade": ""},
                {"atividade": None},
                {"atividade": "Cadastro Geral"}
            ]
        })
        print(f"   üìã Alunos com atividade gen√©rica/indefinida: {sem_atividade}")
        
        # Contar alunos sem turma definida
        sem_turma = collection.count_documents({
            "$or": [
                {"turma": {"$exists": False}},
                {"turma": ""},
                {"turma": None},
                {"turma": "A definir"}
            ]
        })
        print(f"   üè´ Alunos com turma indefinida: {sem_turma}")
        
    else:
        print("‚ùå N√£o foi poss√≠vel conectar ao MongoDB")
        
except Exception as e:
    print(f"‚ùå Erro: {e}")
    import traceback
    traceback.print_exc()

print(f"\n" + "=" * 60)
print("üéØ VERIFICA√á√ÉO CONCLU√çDA")
print("\nüí° CONCLUS√ÉO:")
print("   Se os alunos est√£o no banco mas n√£o aparecem no dashboard,")
print("   o problema √© provavelmente na interface (filtros, pagina√ß√£o, cache)")
print("   ou na consulta do frontend.")