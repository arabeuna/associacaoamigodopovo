#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para Migrar Dados do Localhost para MongoDB Atlas
Associa√ß√£o Amigo do Povo

Este script migra os dados do arquivo dados_alunos.json para o MongoDB Atlas
usado na produ√ß√£o do Render.
"""

import os
import json
from datetime import datetime
from dotenv import load_dotenv

# Carregar configura√ß√µes de produ√ß√£o
load_dotenv('.env.production')

# Importar modelos MongoDB
from models import init_mongodb, AlunoDAO, AtividadeDAO, TurmaDAO, LogAtividadeDAO

class MigradorMongoDB:
    def __init__(self):
        print('üîÑ Inicializando migra√ß√£o para MongoDB Atlas...')
        self.db = init_mongodb()
        if self.db is None:
            raise Exception('‚ùå N√£o foi poss√≠vel conectar ao MongoDB Atlas')
        
        self.aluno_dao = AlunoDAO()
        self.atividade_dao = AtividadeDAO()
        self.turma_dao = TurmaDAO()
        self.log_dao = LogAtividadeDAO()
        
    def migrar_atividades_basicas(self):
        """Migra atividades b√°sicas para o MongoDB"""
        print('\nüìö Migrando atividades b√°sicas...')
        
        atividades_basicas = [
            {'nome': 'Inform√°tica', 'descricao': 'Curso de inform√°tica b√°sica', 'ativo': True},
            {'nome': 'Fisioterapia', 'descricao': 'Sess√µes de fisioterapia', 'ativo': True},
            {'nome': 'Dan√ßa', 'descricao': 'Aulas de dan√ßa', 'ativo': True},
            {'nome': 'Hidrogin√°stica', 'descricao': 'Exerc√≠cios aqu√°ticos', 'ativo': True},
            {'nome': 'Funcional', 'descricao': 'Treinamento funcional', 'ativo': True},
            {'nome': 'V√¥lei', 'descricao': 'Aulas de v√¥lei', 'ativo': True},
            {'nome': 'Futebol', 'descricao': 'Aulas de futebol', 'ativo': True},
            {'nome': 'Nata√ß√£o', 'descricao': 'Aulas de nata√ß√£o', 'ativo': True}
        ]
        
        migradas = 0
        for atividade in atividades_basicas:
            try:
                # Verificar se j√° existe
                existente = self.atividade_dao.buscar_por_nome(atividade['nome'])
                if not existente:
                    self.atividade_dao.criar(atividade)
                    migradas += 1
                    print(f'  ‚úÖ {atividade["nome"]}')
                else:
                    print(f'  ‚ö†Ô∏è {atividade["nome"]} (j√° existe)')
            except Exception as e:
                print(f'  ‚ùå Erro ao migrar {atividade["nome"]}: {e}')
        
        print(f'\nüìä {migradas} atividades migradas')
        return migradas
    
    def migrar_turmas_basicas(self):
        """Migra turmas b√°sicas para o MongoDB"""
        print('\nüè´ Migrando turmas b√°sicas...')
        
        turmas_basicas = [
            {'nome': '09:00', 'descricao': 'Turma da manh√£ - 09:00', 'ativo': True},
            {'nome': '14:00', 'descricao': 'Turma da tarde - 14:00', 'ativo': True},
            {'nome': '16:00', 'descricao': 'Turma da tarde - 16:00', 'ativo': True},
            {'nome': 'A definir', 'descricao': 'Turma a ser definida', 'ativo': True}
        ]
        
        migradas = 0
        for turma in turmas_basicas:
            try:
                # Verificar se j√° existe
                existente = self.turma_dao.buscar_por_nome(turma['nome'])
                if not existente:
                    self.turma_dao.criar(turma)
                    migradas += 1
                    print(f'  ‚úÖ {turma["nome"]}')
                else:
                    print(f'  ‚ö†Ô∏è {turma["nome"]} (j√° existe)')
            except Exception as e:
                print(f'  ‚ùå Erro ao migrar {turma["nome"]}: {e}')
        
        print(f'\nüìä {migradas} turmas migradas')
        return migradas
    
    def migrar_alunos_do_json(self):
        """Migra alunos do arquivo dados_alunos.json"""
        print('\nüë• Migrando alunos do arquivo JSON...')
        
        arquivo_json = 'dados_alunos.json'
        if not os.path.exists(arquivo_json):
            print(f'‚ùå Arquivo {arquivo_json} n√£o encontrado')
            return 0
        
        try:
            with open(arquivo_json, 'r', encoding='utf-8') as f:
                alunos_data = json.load(f)
        except Exception as e:
            print(f'‚ùå Erro ao ler arquivo JSON: {e}')
            return 0
        
        print(f'üìÑ Encontrados {len(alunos_data)} alunos no arquivo')
        
        migrados = 0
        erros = 0
        
        for i, aluno_data in enumerate(alunos_data):
            try:
                # Verificar se aluno j√° existe (evitar duplicatas)
                aluno_existente = self.aluno_dao.buscar_por_nome_telefone(
                    aluno_data.get('nome', ''), 
                    aluno_data.get('telefone', '')
                )
                if aluno_existente:
                    print(f'  ‚ö†Ô∏è Aluno {aluno_data["nome"]} j√° existe')
                    continue
                
                # Preparar dados do aluno
                aluno_mongo = {
                    'nome': aluno_data.get('nome', ''),
                    'telefone': aluno_data.get('telefone', ''),
                    'endereco': aluno_data.get('endereco', ''),
                    'email': aluno_data.get('email', ''),
                    'data_nascimento': aluno_data.get('data_nascimento', ''),
                    'data_cadastro': aluno_data.get('data_cadastro', datetime.now().strftime('%d/%m/%Y')),
                    'atividade': aluno_data.get('atividade', ''),
                    'turma': aluno_data.get('turma', ''),
                    'observacoes': aluno_data.get('observacoes', ''),
                    'id_unico': aluno_data.get('id_unico', f'migrado_{i}'),
                    'ativo': True,
                    'migrado_em': datetime.now().isoformat()
                }
                
                # Criar aluno no MongoDB
                resultado = self.aluno_dao.criar(aluno_mongo)
                if resultado:
                    migrados += 1
                    if migrados % 50 == 0:
                        print(f'  üìä {migrados} alunos migrados...')
                else:
                    erros += 1
                    
            except Exception as e:
                erros += 1
                print(f'  ‚ùå Erro ao migrar aluno {i+1}: {e}')
        
        print(f'\nüìä Migra√ß√£o conclu√≠da:')
        print(f'  ‚úÖ {migrados} alunos migrados com sucesso')
        print(f'  ‚ùå {erros} erros encontrados')
        
        # Registrar log da migra√ß√£o
        try:
            self.log_dao.criar({
                'acao': 'Migra√ß√£o de Dados',
                'detalhes': f'Migrados {migrados} alunos do localhost para MongoDB Atlas',
                'usuario': 'Sistema',
                'timestamp': datetime.now()
            })
        except:
            pass
        
        return migrados
    
    def executar_migracao_completa(self):
        """Executa a migra√ß√£o completa"""
        print('üöÄ INICIANDO MIGRA√á√ÉO COMPLETA PARA MONGODB ATLAS')
        print('=' * 60)
        
        try:
            # Migrar atividades
            atividades_migradas = self.migrar_atividades_basicas()
            
            # Migrar turmas
            turmas_migradas = self.migrar_turmas_basicas()
            
            # Migrar alunos
            alunos_migrados = self.migrar_alunos_do_json()
            
            print('\nüéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!')
            print('=' * 60)
            print(f'üìä RESUMO:')
            print(f'  ‚Ä¢ Atividades: {atividades_migradas}')
            print(f'  ‚Ä¢ Turmas: {turmas_migradas}')
            print(f'  ‚Ä¢ Alunos: {alunos_migrados}')
            print(f'\nüí° Os dados agora est√£o dispon√≠veis no MongoDB Atlas')
            print(f'   e aparecer√£o no deploy do Render!')
            
            return True
            
        except Exception as e:
            print(f'\n‚ùå ERRO DURANTE A MIGRA√á√ÉO: {e}')
            return False

def main():
    """Fun√ß√£o principal"""
    try:
        migrador = MigradorMongoDB()
        sucesso = migrador.executar_migracao_completa()
        
        if sucesso:
            print('\n‚úÖ Migra√ß√£o realizada com sucesso!')
            print('üîÑ Fa√ßa um novo deploy no Render para ver os dados')
        else:
            print('\n‚ùå Migra√ß√£o falhou')
            
    except Exception as e:
        print(f'‚ùå Erro fatal: {e}')
        print('\nüí° Verifique:')
        print('  - Conex√£o com internet')
        print('  - Credenciais do MongoDB Atlas')
        print('  - Se o cluster est√° ativo')

if __name__ == '__main__':
    main()