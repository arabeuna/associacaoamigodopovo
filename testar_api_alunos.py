#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar especificamente a API de alunos
"""

import requests
import json
from datetime import datetime

print("üß™ TESTE DA API DE ALUNOS")
print("="*50)

BASE_URL = "http://localhost:5000"

def testar_api_buscar_alunos():
    """Testa a API de buscar alunos"""
    try:
        print(f"\nüîç Testando API /buscar_alunos...")
        response = requests.get(f"{BASE_URL}/buscar_alunos", timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, list):
                    total_alunos = len(data)
                    print(f"   ‚úÖ API funcionando - {total_alunos} alunos encontrados")
                    
                    if total_alunos == 315:
                        print("   üéâ PERFEITO! Exatamente 315 alunos como esperado")
                    elif total_alunos > 0:
                        print(f"   ‚ö†Ô∏è  Encontrados {total_alunos} alunos (esperado: 315)")
                    else:
                        print("   ‚ùå Nenhum aluno encontrado")
                    
                    # Mostrar alguns exemplos
                    if total_alunos > 0:
                        print(f"\nüìã Primeiros 3 alunos:")
                        for i, aluno in enumerate(data[:3]):
                            nome = aluno.get('nome', 'Nome n√£o encontrado')
                            turma = aluno.get('turma', 'Turma n√£o definida')
                            print(f"   {i+1}. {nome} - Turma: {turma}")
                    
                    return total_alunos
                else:
                    print(f"   ‚ùå Resposta n√£o √© uma lista: {type(data)}")
                    print(f"   Conte√∫do: {data}")
            except json.JSONDecodeError:
                print(f"   ‚ùå Resposta n√£o √© JSON v√°lido")
                print(f"   Conte√∫do: {response.text[:200]}...")
        else:
            print(f"   ‚ùå API retornou erro {response.status_code}")
            print(f"   Conte√∫do: {response.text[:200]}...")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao testar API: {e}")
    
    return 0

def testar_pagina_alunos():
    """Testa a p√°gina de alunos"""
    try:
        print(f"\nüîç Testando p√°gina /alunos...")
        response = requests.get(f"{BASE_URL}/alunos", timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            content = response.text
            if "Alunos Cadastrados" in content or "alunos" in content.lower():
                print("   ‚úÖ P√°gina de alunos carregou")
                
                # Verificar se h√° indica√ß√£o de quantidade
                if "315" in content:
                    print("   üéâ N√∫mero 315 encontrado na p√°gina!")
                elif any(num in content for num in ["300", "310", "320"]):
                    print("   ‚ö†Ô∏è  N√∫mero pr√≥ximo a 315 encontrado")
                else:
                    print("   ‚ö†Ô∏è  N√∫mero 315 n√£o encontrado na p√°gina")
            else:
                print("   ‚ùå P√°gina n√£o parece ser de alunos")
        else:
            print(f"   ‚ùå P√°gina retornou erro {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao testar p√°gina: {e}")

def main():
    print(f"‚è∞ Teste iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Verificar se aplica√ß√£o est√° rodando
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå Aplica√ß√£o n√£o est√° rodando")
            return
    except:
        print("‚ùå Aplica√ß√£o n√£o est√° rodando")
        return
    
    print("‚úÖ Aplica√ß√£o est√° rodando")
    
    # Testar API
    total_alunos = testar_api_buscar_alunos()
    
    # Testar p√°gina
    testar_pagina_alunos()
    
    print("\n" + "="*50)
    print("üìä RESUMO:")
    if total_alunos == 315:
        print("‚úÖ SUCESSO: 315 alunos encontrados na API")
        print("‚úÖ A aplica√ß√£o local est√° funcionando corretamente")
    elif total_alunos > 0:
        print(f"‚ö†Ô∏è  PARCIAL: {total_alunos} alunos encontrados (esperado: 315)")
        print("‚ö†Ô∏è  Pode haver problema no carregamento dos dados")
    else:
        print("‚ùå FALHA: Nenhum aluno encontrado")
        print("‚ùå H√° problema no carregamento dos dados")
    print("="*50)
    
if __name__ == "__main__":
    main()