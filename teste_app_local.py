#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do app Flask local com SQLite
"""

import os
import sys
from dotenv import load_dotenv

# For√ßar uso do .env local (n√£o .env.production)
if os.path.exists('.env'):
    load_dotenv('.env')
    print("üìã Carregando configura√ß√µes locais (.env)")
else:
    print("‚ö†Ô∏è  Arquivo .env n√£o encontrado")

# Importar ap√≥s carregar as vari√°veis de ambiente
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from app import obter_alunos_usuario
    print("‚úÖ Fun√ß√£o obter_alunos_usuario importada com sucesso")
except Exception as e:
    print(f"‚ùå Erro ao importar fun√ß√£o: {e}")
    sys.exit(1)

def testar_app_local():
    """Testa a fun√ß√£o obter_alunos_usuario no ambiente local"""
    print("\nüöÄ TESTE APP LOCAL - FUN√á√ÉO obter_alunos_usuario")
    print("=" * 60)
    
    # Verificar configura√ß√£o do banco
    database_url = os.environ.get('DATABASE_URL')
    print(f"üóÑÔ∏è  DATABASE_URL: {database_url}")
    
    try:
        # Criar contexto Flask para simular sess√£o
        from flask import Flask
        app = Flask(__name__)
        app.secret_key = 'teste_local'
        
        with app.test_request_context():
            from flask import session
            
            # Simular login como admin
            session['usuario_logado'] = 'admin'
            session['usuario_nivel'] = 'admin'
            
            print(f"üë§ Testando como: admin (n√≠vel: admin)")
            
            # Chamar a fun√ß√£o (sem par√¢metros)
            alunos = obter_alunos_usuario()
            
            print(f"üìä Total de alunos retornados: {len(alunos)}")
            
            if len(alunos) > 0:
                print("\nüìã Primeiros 5 alunos:")
                for i, aluno in enumerate(alunos[:5], 1):
                    nome = aluno.get('nome', 'N/A')
                    atividade = aluno.get('atividade', 'N/A')
                    print(f"  {i}. {nome} - {atividade}")
            else:
                print("‚ö†Ô∏è  Nenhum aluno encontrado")
            
            return len(alunos)
        
    except Exception as e:
        print(f"‚ùå Erro ao executar fun√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return 0

if __name__ == "__main__":
    testar_app_local()