#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar planilha CSV de teste sem depend√™ncia do pandas
Cria um arquivo CSV com 404 alunos para testar o upload
"""

import csv
import os
from datetime import datetime
import json

def criar_planilha_csv(num_alunos=404):
    """Cria uma planilha CSV com o n√∫mero especificado de alunos"""
    print(f"üìù Criando planilha CSV com {num_alunos} alunos...")
    
    # Dados de exemplo
    nomes = [
        "Jo√£o Silva", "Maria Santos", "Pedro Oliveira", "Ana Costa", "Carlos Ferreira",
        "Lucia Pereira", "Roberto Lima", "Fernanda Souza", "Marcos Alves", "Patricia Rocha",
        "Bruno Martins", "Carla Dias", "Diego Nascimento", "Eliana Barbosa", "Fabio Cardoso",
        "Gabriela Moreira", "Henrique Teixeira", "Isabela Campos", "Jorge Ribeiro", "Karina Lopes"
    ]
    
    atividades = [
        "Nata√ß√£o", "Muscula√ß√£o", "Pilates", "Inform√°tica", "Fisioterapia",
        "Dan√ßa", "Hidrogin√°stica", "Funcional", "V√¥lei", "Futebol", "Cadastro Geral"
    ]
    
    # Criar pasta uploads se n√£o existir
    os.makedirs('uploads', exist_ok=True)
    
    # Nome do arquivo
    filename = f"planilha_teste_{num_alunos}_alunos_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    filepath = os.path.join('uploads', filename)
    
    # Criar arquivo CSV
    with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['Nome', 'CPF', 'Data_Nascimento', 'Telefone', 'Email', 'Endereco', 'Atividade', 'Status']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        # Escrever cabe√ßalho
        writer.writeheader()
        
        # Escrever dados
        for i in range(num_alunos):
            nome_base = nomes[i % len(nomes)]
            nome = f"{nome_base} {i+1:03d}"
            
            # Gerar CPF fict√≠cio
            cpf = f"{(i+1):011d}"
            cpf_formatado = f"{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:11]}"
            
            aluno = {
                'Nome': nome,
                'CPF': cpf_formatado,
                'Data_Nascimento': f"{(i % 28) + 1:02d}/{((i % 12) + 1):02d}/{1980 + (i % 40)}",
                'Telefone': f"(11) 9{(i+1):04d}-{(i*7) % 10000:04d}",
                'Email': f"{nome.lower().replace(' ', '.')}{i+1}@email.com",
                'Endereco': f"Rua {nome_base}, {(i+1)*10}, S√£o Paulo - SP",
                'Atividade': atividades[i % len(atividades)],
                'Status': 'Ativo'
            }
            
            writer.writerow(aluno)
    
    print(f"‚úÖ Planilha CSV criada: {filepath}")
    print(f"üìä Colunas: {fieldnames}")
    print(f"üìà Total de registros: {num_alunos}")
    print(f"üìÅ Tamanho do arquivo: {os.path.getsize(filepath)} bytes")
    
    return filepath

def registrar_log_criacao(arquivo_planilha):
    """Registra a cria√ß√£o da planilha nos logs"""
    timestamp = datetime.now().isoformat()
    
    log_entry = {
        "timestamp": timestamp,
        "data_hora": datetime.now().strftime("%d/%m/%Y √†s %H:%M:%S"),
        "acao": "PLANILHA_TESTE_CRIADA",
        "detalhes": f"Planilha CSV de teste criada: {arquivo_planilha}",
        "status": "SUCCESS",
        "ambiente": "TESTE",
        "tipo": "UPLOAD_PLANILHA"
    }
    
    # Adicionar ao log existente
    log_file = "logs_upload_planilha_producao.json"
    
    try:
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                logs = json.load(f)
        else:
            logs = []
        
        logs.append(log_entry)
        
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
            
        print(f"üìù Log registrado: {log_entry['detalhes']}")
        
    except Exception as e:
        print(f"‚ùå Erro ao registrar log: {e}")

def mostrar_preview_planilha(arquivo_planilha, linhas=5):
    """Mostra preview das primeiras linhas da planilha"""
    print(f"\nüëÄ Preview das primeiras {linhas} linhas:")
    print("-" * 80)
    
    try:
        with open(arquivo_planilha, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            
            # Mostrar cabe√ßalho
            print(f"{'Nome':<25} {'CPF':<15} {'Atividade':<15} {'Telefone':<15}")
            print("-" * 80)
            
            # Mostrar primeiras linhas
            for i, row in enumerate(reader):
                if i >= linhas:
                    break
                print(f"{row['Nome']:<25} {row['CPF']:<15} {row['Atividade']:<15} {row['Telefone']:<15}")
            
            print("-" * 80)
            
    except Exception as e:
        print(f"‚ùå Erro ao ler preview: {e}")

def mostrar_instrucoes_completas(arquivo_planilha):
    """Mostra instru√ß√µes completas para o upload"""
    print("\n" + "="*80)
    print("üìã INSTRU√á√ïES COMPLETAS PARA TESTE DE UPLOAD - AMBIENTE DE PRODU√á√ÉO")
    print("="*80)
    
    print(f"üìÅ Arquivo criado: {arquivo_planilha}")
    print(f"üìä Formato: CSV (compat√≠vel com Excel)")
    print(f"üíæ Tamanho: {os.path.getsize(arquivo_planilha)} bytes")
    
    print("\nüéØ OBJETIVO DO TESTE:")
    print("‚Ä¢ Verificar se o sistema processa corretamente 404 novos alunos")
    print("‚Ä¢ Estado atual: 314 alunos no banco")
    print("‚Ä¢ Estado esperado ap√≥s upload: 718 alunos (314 + 404)")
    
    print("\nüîÑ PASSOS DETALHADOS:")
    print("1. üåê Acesse o sistema em produ√ß√£o")
    print("2. üîê Login: admin / admin123")
    print("3. üìÇ Menu: 'Backup de Planilhas'")
    print("4. üì§ Upload do arquivo CSV criado")
    print("5. üéØ Selecione atividade: 'Cadastro Geral' (recomendado)")
    print("6. ‚úÖ Confirme o upload")
    print("7. ‚è±Ô∏è  Aguarde o processamento")
    
    print("\nüìä MONITORAMENTO P√ìS-UPLOAD:")
    print("‚Ä¢ Execute: python test_upload_planilha_producao.py --pos-upload")
    print("‚Ä¢ Verifique diferen√ßa de alunos nos logs")
    print("‚Ä¢ Confirme se todos os 404 alunos foram adicionados")
    
    print("\n‚ö†Ô∏è  PONTOS DE ATEN√á√ÉO:")
    print("‚Ä¢ Verifique se n√£o h√° duplicatas de CPF")
    print("‚Ä¢ Confirme se as atividades foram atribu√≠das corretamente")
    print("‚Ä¢ Monitore poss√≠veis erros durante o processamento")
    
    print("\nüìù LOGS E MONITORAMENTO:")
    print("‚Ä¢ Logs detalhados: logs_upload_planilha_producao.json")
    print("‚Ä¢ Logs do sistema: logs_atividades.json")
    print("‚Ä¢ Verifica√ß√£o: python test_mongodb_alunos.py")
    
    print("="*80)

if __name__ == "__main__":
    import sys
    
    print("üìä Criador de Planilha CSV para Teste de Upload")
    print("=" * 50)
    
    # Determinar n√∫mero de alunos
    num_alunos = 404
    if len(sys.argv) > 1:
        try:
            num_alunos = int(sys.argv[1])
        except ValueError:
            print("‚ö†Ô∏è  N√∫mero inv√°lido, usando 404 como padr√£o")
    
    # Criar planilha CSV
    arquivo = criar_planilha_csv(num_alunos)
    
    # Registrar nos logs
    registrar_log_criacao(arquivo)
    
    # Mostrar preview
    mostrar_preview_planilha(arquivo)
    
    # Mostrar instru√ß√µes completas
    mostrar_instrucoes_completas(arquivo)
    
    print("\n‚úÖ Planilha CSV criada com sucesso!")
    print("üöÄ Pronta para upload no ambiente de produ√ß√£o")
    print(f"üìÅ Localiza√ß√£o: {os.path.abspath(arquivo)}")